	TP5 - Code generation

Nome: Bernardo de Almeida Abreu
Matricula: 2013007153


A primeira coisa que é feita pelo gerador de código é construir a class_nameTab. 
Essa tabela apresenta as labels referentes aos objetos do tipo string que
guardam os nomes das classes. Esses objetos aparecem na ordem de suas tags,
dessa forma é necessário definir uma maneira de atribuir uma tag a uma classe.
A maneira escolhida foi a de percorrer a grafo de herança, começando por object
e seguindo pelos filhos de cada classe seguinte. Dessa forma, todas as classes
descendentes de uma classe possuem tags continuas a tag da classe pai, ou seja,
não existe uma classe A que não herda de uma classe B, mas cuja tag está entre
as tags de duas classes que herdam de A. Dessa forma se torna fácil verificar em
tempo de execução se uma classe descende de uma outra classe, o que é necessário
no case.

Em seguida é construida a class_objTab. Essa tabela também é organizada pela
ordem das tags. As tags são percorridas em ordem e uma referencia ao prototype
object e ao init de cada classe é emitida.

A terceira parte é a geração das tabelas de dispatch. Para contruir essas
tabelas é utilizada uma lista. Para gerar essa tabela para cada classe, deve-se
chegar até a classe mais ancestral da mesma e começar a inserir em uma lista
os métodos e suas respectivas classes na ordem em que elas aparecem, começando
de Object. Quando se encontra um metódo que já está presente na lista, o nome da
classe da aparição mais atual do metódo subsitui a classe antiga, porém na mesma
posiçao na lista. Todo novo metódo é inseirdo no final da mesma. Após
percorridos todos os métodos, a lista é percorrida na ordem, imprimindo o nome
da classe e o nome do método. Dessa forma o offset de cada método é mantido para
as classes que os herdam de outras classes.

A últimas tabelas a serem geradas são as do protótipos dos objecto. Os atributos
devem ser impressos começando do mais ancestral, assim é feita uma recursão para
imprimir os mais antigos primeiros.

O passo seguinte é gerar o código para a inicialização dos objetos. A primeira
coisa a se fazer é criar o registro de ativação. Primeiro é empilhado o frame
pointer, depois o registrador que guarda o objeto self e por fim o endereço de
retorno. Esse mesmo registro é utilizado nos metódos. A inicialização da classe
pai é chamada e em seguida é feita a inicialização de cada atributo declarado
nessa classe.

Por fim são gerados os métodos de cada classe. O código é gerado seguindo a
ideia de uma máquina de pilha. O registro de ativação é parecidocom o registro
da inicialização de objetos, porém quando existem variaveis a serem criadas
dentro de lets e cases no método, deve-se alocar um espaço extra entre o fim da
registro tradicional e o fim da pilha, de modo a acessar essas váriaveis por
meio de um offset do frame pointes. Para definir o espaço a ser alocado para
essas variaveis a serem criadas é feita uma primeira passada na árvore, antes de
gerar o código. Para cada nó o tamanho da pilha é o tamanho da pilha mais o
numero de variáveis daquele nó. Dessa forma nós que possuem variáveis terão um
tamanho de pilha de um mais o tamanho de pilha do nó filho e nós que não possuem
variáveis possuem o mesmo tamanho de pilha do nó filho. Se um nó possui mais de
um filho, o tamanho de pilha que conta é o maior entre os tamanhos de pilha dos
filhos. Assim, se define o tamanho maximo de pilha que se deverá ter em um
determinado momento.
Para se localizar os atributos, parametros de metodos e variaveis de let e case
durante a geração de código, é utilizada uma tabela de atributos. Essa tabela é
acessível pelo nome do atributo e retorna uma struct que contem o um registrador
com um endereço e o offset relativo a esse endereço onde está localizado esse
objeto.
Os argumentos de um método podem ser acessados dentro do mesmo a partir de um
offset do frame pointer.
A verifição de que uma classe herda de uma classe descrita em um branch de um
case deve ser feita em runtime. Para isso é verificado se a tag dessa classe
está dentro do intervalo determinado pela tag da classe do branch e a tag da
classe herdeira da classe do branch cujo tag é a maior.