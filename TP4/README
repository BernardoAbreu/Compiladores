Bernardo de Almeida Abreu
2013007153


	A primeira coisa que o semant_checker faz é realizar as checagens de erro 
nas definições das classes do programa. Qualquer erro dessa etapa, exceto o
erro de falta de classe main, faz com que o compilador pare. Se uma classe for
redefinida, tiver um pai inválido ou se houver ciclos na herança a checagem 
posterior ficará muito mais complicada. O algoritmo para fazer a verificação de
ciclos foi adaptada do seguinte: 
http://www.geeksforgeeks.org/detect-cycle-in-a-graph/

	O programa tem funções para fazer a recursão na arvore setando os tipos nos
nós das expressões de acordo com a forma descrita no manual do cool. Os tipos
SELF_TYPE são setados como SELF_TYPE. Em cada nó da arvore é feita a verificação
de erros referente aquela parte da gramátiica, seja ela uma expressão ou outra
coisa.

	O manual também descreve como deve ser feita a verificação de conformância
dos tipos. Foi criada uma função type_check() para verificar se dois tipos
conforman. Antes de toda chamada de type_check(Suymbol, Symbol) deve ser feita
a conversão dos tipos para o nome da classe atual, caso eles sejam SELF_TYPE.

	Para as expressões de if e case foi criada uma função join, que encontra a
primeira classe que é um ancestral comum a dois tipos diferentes ou o proprio
tipo, caso eles sejam iguais. Essa função recebe a classe atual como parametro
para fazer a conversão do SELF_TYPE internamente.

	Para as funções de dispatch foi criada uma função find_method() para buscar
um metódo de uma classe. Com esse metódo é possivel fazer a checagens dos
parametros das chamadas de metodos, assim como setar o seu tipo de retorno.

	As mensagens de erros apresentados pelo compilador são, em sua maioria, as
mesmas apresentadas pelo cooc. Isso foi feito pois, muitos testes foram feitos
comparando os erros apresentados por ambos, e isso facilitou o precesso. Foram
feitos diversios testes de modo a tentar verificar a maior parte dos erros que
deveriam ser emitidos.

As tabelas de atributos e de metodos são construidas recursivamente. As funções
add_feature são chamadas apenas para a classe atual, de forma que os erros só
sejam mostradas para ela. As outras classes são adicionadas na função recursiva
auxiliar build_feat, que faz a checagem de erros para adicionar na tabela, mas
não exibe os erros. A maior parte das checagens de erro para metodos e
atributos, como redefinição, utilização da palavra self, ou falta de
conformidade no tipo de retorno é feita nessa construção das tabelas.






